var Comment = React.createClass({
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleDeletion: function(e) {
    this.setState({author: '', text: ''});
  },
	render: function() {
		var text = this.state.liked ? 'like' : 'haven\'t liked';
		return (
			<div className="comment col-md-12">
				<div className="col-md-8">
					<h4 className="commentAuthor">{this.props.author}</h4>
					{this.props.children}
				</div>
				<div className="col-md-4">
				</div>
			</div>
		);
	}
});

var CommentList = React.createClass({
	getInitialState: function() {
    return (<h4>No comments yet!</h4>);
  },
  handleDelete: function(e) {
    this.deleteComment;
  },
	render: function() {
		var commentNodes = this.props.data.map(function(comment) {
			return (
				<div>
					<Comment author={comment.author} key={comment.key} >{comment.text}</Comment>
					 <button onClick={this.props.deleteComment} value={comment.key}> Delete </button>
				</div>
			);
		});				
		return (
			<div className="commentList">
				{commentNodes}
			</div>
		);
	}
});

var CommentForm =  React.createClass({
	getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
	render: function() {
		return (
			<form className="commentForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange}
        />
		    <input type="submit" value="Post" />
		  </form>
		);
	}
});

var CommentBox = React.createClass({
	loadCommentsFromServer: function() {
	    $.ajax({
	      url: this.props.url,
	      dataType: 'json',
	      cache: false,
	      success: function(data) {
	        this.setState({data: data});
	      }.bind(this),
	      error: function(xhr, status, err) {
	        console.error(this.props.url, status, err.toString());
	      }.bind(this)
	    });
	},
	handleCommentSubmit: function(comment) {
		var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
      	this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  deleteComment: function(comment) {
		//Todo
  },
	getInitialState: function() {
    	return {data: []};
  	},
  	componentDidMount: function() {
	    this.loadCommentsFromServer();
    	setInterval(this.loadCommentsFromServer, this.props.pollInterval);
	},
	render: function() {
		return (
			<div className="commentBox">
				<h1>Comments</h1>
				<div className="commentList"><CommentList data={this.state.data} deleteComment={this.deleteComment} /></div>
				<div className="commentForm">
					<h2>Add a Comment!</h2>
					<CommentForm onCommentSubmit={this.handleCommentSubmit} />
				</div>
			</div>
		);
	}
});

ReactDOM.render(<CommentBox url="/api/comments" pollInterval={2000} />, document.getElementById('content'));